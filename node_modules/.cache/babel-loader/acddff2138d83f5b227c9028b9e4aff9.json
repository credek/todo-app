{"ast":null,"code":"var _jsxFileName = \"/home/dci-le09/Pobrane/SPA-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { throttle } from 'lodash';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducers from './store/reducers'; // Get data from localStorage\n\nconst loadState = () => {\n  try {\n    const items = JSON.parse(localStorage.getItem('todo-app-items'));\n    if (items === null) return undefined;\n    return items;\n  } catch (err) {\n    return undefined;\n  }\n}; // Write data to localStorage\n\n\nconst saveState = state => {\n  try {\n    localStorage.setItem('todo-app-items', JSON.stringify(state));\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst store = createStore(reducers, {\n  todos: loadState()\n}, compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())); // We can subscribe to state which triggers a callback every time state changes\n// To make sure we don't write too often, we limit function calls to 1 per second with the help of lodash\n\nstore.subscribe(throttle(() => {\n  const todosState = store.getState().todos;\n  saveState(todosState);\n}), 1000);\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/dci-le09/Pobrane/SPA-todo-app/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","throttle","createStore","applyMiddleware","compose","Provider","thunk","reducers","loadState","items","JSON","parse","localStorage","getItem","undefined","err","saveState","state","setItem","stringify","console","log","store","todos","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","todosState","getState","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,QAAP,MAAqB,kBAArB,C,CAEA;;AACA,MAAMC,SAAS,GAAG,MAAM;AACpB,MAAI;AACA,UAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAX,CAAd;AACA,QAAIJ,KAAK,KAAK,IAAd,EAAoB,OAAOK,SAAP;AACpB,WAAOL,KAAP;AACH,GAJD,CAIE,OAAOM,GAAP,EAAY;AACV,WAAOD,SAAP;AACH;AACJ,CARD,C,CAUA;;;AACA,MAAME,SAAS,GAAGC,KAAK,IAAI;AACvB,MAAI;AACAL,IAAAA,YAAY,CAACM,OAAb,CAAqB,gBAArB,EAAuCR,IAAI,CAACS,SAAL,CAAeF,KAAf,CAAvC;AACH,GAFD,CAEE,OAAOF,GAAP,EAAY;AACVK,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACH;AACJ,CAND;;AAQA,MAAMO,KAAK,GAAGpB,WAAW,CAACK,QAAD,EAAW;AAAEgB,EAAAA,KAAK,EAAEf,SAAS;AAAlB,CAAX,EAAmCJ,OAAO,CAACD,eAAe,CAACG,KAAD,CAAhB,EAAyBkB,MAAM,CAACC,4BAAP,IAAuCD,MAAM,CAACC,4BAAP,EAAhE,CAA1C,CAAzB,C,CAEA;AACA;;AACAH,KAAK,CAACI,SAAN,CACIzB,QAAQ,CACR,MAAM;AACN,QAAM0B,UAAU,GAAGL,KAAK,CAACM,QAAN,GAAiBL,KAApC;AACAP,EAAAA,SAAS,CAACW,UAAD,CAAT;AACH,CAJW,CADZ,EAKI,IALJ;AAOA7B,QAAQ,CAAC+B,MAAT,eACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEP,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAIAQ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJA,E,CAMA;AACA;AACA;;AACA/B,aAAa,CAACgC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { throttle } from 'lodash';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport reducers from './store/reducers';\n\n// Get data from localStorage\nconst loadState = () => {\n    try {\n        const items = JSON.parse(localStorage.getItem('todo-app-items'));\n        if (items === null) return undefined;\n        return items;\n    } catch (err) {\n        return undefined;\n    }\n}\n\n// Write data to localStorage\nconst saveState = state => {\n    try {\n        localStorage.setItem('todo-app-items', JSON.stringify(state));\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nconst store = createStore(reducers, { todos: loadState() }, compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\n\n// We can subscribe to state which triggers a callback every time state changes\n// To make sure we don't write too often, we limit function calls to 1 per second with the help of lodash\nstore.subscribe(\n    throttle(\n    () => {\n    const todosState = store.getState().todos;    \n    saveState(todosState)\n}), 1000);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}